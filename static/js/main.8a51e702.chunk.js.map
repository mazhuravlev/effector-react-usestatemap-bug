{"version":3,"sources":["store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firstEvent","createEvent","secondEvent","store","createStore","first","second","on","s","p","Test","useStoreMap","x","className","onClick","App","useState","show","setShow","state","useStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAEaA,EAAaC,cACbC,EAAcD,cACdE,EAAQC,YAAY,CAAEC,MAAO,EAAGC,OAAQ,IAChDC,GAAGP,GAAY,SAACQ,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,IAAmBH,MAAOI,OACzCF,GAAGL,GAAa,SAACM,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,IAAmBF,OAAQG,O,OCD1CC,EAAiB,WACrB,IAAMJ,EAASK,YAAYR,GAAO,SAAAS,GAAC,OAAIA,EAAEN,UACzC,OAAO,sBAAKO,UAAU,OAAf,2BAEL,0CAAaP,KACb,wBAAQQ,QAAS,kBAAMZ,EAAYI,EAAS,IAA5C,4BAqBWS,MAjBf,WACE,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAQC,YAASjB,GACvB,OACE,gCACE,iIACA,iFACA,gLACA,wBAAQW,QAAS,kBAAMd,EAAWmB,EAAMd,MAAQ,IAAhD,8BACA,wBAAQS,QAAS,kBAAMZ,EAAYiB,EAAMb,OAAS,IAAlD,+BACA,uBACA,wBAAQQ,QAAS,kBAAMI,GAAQ,SAAAN,GAAC,OAAKA,MAArC,oBACCK,GAAQ,cAAC,EAAD,QCZAI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8a51e702.chunk.js","sourcesContent":["import { createEvent, createStore } from 'effector';\r\n\r\nexport const firstEvent = createEvent<number>();\r\nexport const secondEvent = createEvent<number>();\r\nexport const store = createStore({ first: 1, second: 2 })\r\n    .on(firstEvent, (s, p) => ({ ...s, first: p }))\r\n    .on(secondEvent, (s, p) => ({ ...s, second: p }));\r\n","import { useStore, useStoreMap } from 'effector-react';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { firstEvent, secondEvent, store } from './store';\n\nconst Test: React.FC = () => {\n  const second = useStoreMap(store, x => x.second);\n  return <div className=\"test\">\n    Test component\n    <div>value: {second}</div>\n    <button onClick={() => secondEvent(second + 1)}>fire event</button>\n  </div>;\n}\n\nfunction App() {\n  const [show, setShow] = useState(true);\n  const state = useStore(store);\n  return (\n    <div>\n      <p>1. Click \"fire Second event\", Test component will update. It is subscribed with 'useStoreMap'.</p>\n      <p> 2. Unmount Test component with 'Toggle' button.</p>\n      <p> 3. Click \"fire Second event\", warning will be displayed in console: 'Warning: Can't perform a React state update on an unmounted component.'</p>\n      <button onClick={() => firstEvent(state.first + 1)}>fire First event</button>\n      <button onClick={() => secondEvent(state.second + 1)}>fire Second event</button>\n      <br />\n      <button onClick={() => setShow(x => !x)}>Toggle</button>\n      {show && <Test />}\n    </div >\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}